pipeline {
    agent none
    environment {
        GHCR_REGISTRY = 'ghcr.io' // GitHub Container Registry
        GHCR_USER = 'ASDFASDF' // This can technically be anything. The GitHub PAT is what actually authenticates to GHCR.
        // GHCR_REPOSITORY = 'your-github-username/your-image-name' # Actually, get this dynamically from Jenkins env vars
        GHCR_CREDENTIALS_ID = 'jenkins-github-ghcr-pat-token-andrewjdawes' // Jenkins Credentials ID for a GitHub PAT Token with read/write access to GHCR packages
    }
    stages {
        // Check out this way to detect if you are building a tag or not: https://www.youtube.com/watch?v=saiCjlJpfdA
        stage('Exit early') {
            agent any
            when {
                not {
                    anyOf {
                        buildingTag();
                        branch 'main';
                    }
                }
            }
            steps {
                script {
                    echo "Not building. Exiting pipeline with 'NOT_BUILT' status."
                    currentBuild.result = 'NOT_BUILT'
                    error("No changes detected; exiting pipeline.")
                    exit 1
                    return
                }
            }
        }
        stage('Define vars') {
            agent any
            steps {
                script {
                    def gitUrl = env.GIT_URL
                    def matcher = gitUrl =~ /https:\/\/github\.com\/([^\/]+)\/([^\/]+)\.git/
                    if (matcher.matches()) {
                        env.GITHUB_REPOSITORY_OWNER = matcher[0][1]
                        env.GITHUB_REPOSITORY_NAME = matcher[0][2]
                        echo "Owner: ${env.GITHUB_REPOSITORY_OWNER}, Repo: ${env.GITHUB_REPOSITORY_NAME}"
                    } else {
                        error "Failed to extract owner and repo from GIT_URL"
                    }
                    // When building the main branch, use the 'latest' tag
                    env.DYNAMIC_TAG_NAME = env.GIT_BRANCH == 'main' ? 'latest' : env.TAG_NAME
                    env.GHCR_REPOSITORY = "${env.GITHUB_REPOSITORY_OWNER}/${env.GITHUB_REPOSITORY_NAME}".toLowerCase()
                    env.LABEL_ORG_OPENCONTAINERS_IMAGE_SOURCE = "https://github.com/${env.GITHUB_REPOSITORY_OWNER}/${env.GITHUB_REPOSITORY_NAME}"
                }
            }
        }
        stage('Build, Extract, and Push Archive') {
            agent { label 'docker' }
            steps {
                script {
                    withCredentials([string(credentialsId: GHCR_CREDENTIALS_ID, variable: 'GHCR_PAT')]) {
                        sh '''
                        echo "${GHCR_PAT}" | docker login ${GHCR_REGISTRY} -u "${GHCR_USER}" --password-stdin
                        docker build --target archive -t ${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${DYNAMIC_TAG_NAME}-archive .
                        docker image inspect ${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${DYNAMIC_TAG_NAME}-archive
                        container_id=$(docker create ${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${DYNAMIC_TAG_NAME}-archive)
                        docker cp ${container_id}:/plugin.zip .
                        docker rm -v ${container_id} || true
                        docker run --rm \
                            --pull always \
                            -v "$(pwd)/plugin.zip":/plugin.zip \
                            -e PLUGIN_SLUG="${GITHUB_REPOSITORY_NAME}" \
                            -e PLUGIN_ZIP_PATH="/plugin.zip" \
                            -e REGISTRY_USERNAME="${GHCR_USER}" \
                            -e REGISTRY_PASSWORD="${GHCR_PAT}" \
                            -e IMAGE_NAME="${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${DYNAMIC_TAG_NAME}" \
                            ghcr.io/codekaizen-github/wordpress-plugin-registry-oras-plugin-deploy:v2-base
                        rm -f plugin.zip
                        '''
                    }
                }
            }
        }
    }
}
