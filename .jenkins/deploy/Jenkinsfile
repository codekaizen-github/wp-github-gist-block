pipeline {
    agent none
    environment {
        GHCR_REGISTRY = 'ghcr.io' // GitHub Container Registry
        GHCR_USER = 'ASDFASDF' // This can technically be anything. The GitHub PAT is what actually authenticates to GHCR.
        GHCR_CREDENTIALS_ID = 'jenkins-github-ghcr-pat-token-andrewjdawes' // Jenkins Credentials ID for a GitHub PAT Token with read/write access to GHCR packages
    }
    stages {
        stage('Define vars') {
            agent any
            steps {
                script {
                    def gitUrl = env.GIT_URL
                    def matcher = gitUrl =~ /https:\/\/github\.com\/([^\/]+)\/([^\/]+)\.git/
                    if (matcher.matches()) {
                        env.GITHUB_REPOSITORY_OWNER = matcher[0][1]
                        env.GITHUB_REPOSITORY_NAME = matcher[0][2]
                        echo "Owner: ${env.GITHUB_REPOSITORY_OWNER}, Repo: ${env.GITHUB_REPOSITORY_NAME}"
                    } else {
                        error "Failed to extract owner and repo from GIT_URL"
                    }
                    // When building the main branch, use the 'latest' tag. Replace any "/" with "-" to ensure valid Docker tag.
                    env.DYNAMIC_TAG_NAME = (env.GIT_BRANCH == 'main' ? 'latest' : env.GIT_BRANCH).replaceAll('/', '-')
                    env.GHCR_REPOSITORY = "${env.GITHUB_REPOSITORY_OWNER}/${env.GITHUB_REPOSITORY_NAME}".toLowerCase()
                    env.PACKAGE_SLUG = "${env.GITHUB_REPOSITORY_NAME}" // Use the repository name as the plugin slug
                    env.LABEL_ORG_OPENCONTAINERS_IMAGE_SOURCE = "https://github.com/${env.GITHUB_REPOSITORY_OWNER}/${env.GITHUB_REPOSITORY_NAME}"
                    env.WP_PACKAGE_METADATA_OVERRIDES = """{
                        "sections": {
                            "description": "Add a GitHub Gist Block.",
                            "changelog": "changelog here",
                            "faq": "faq here"
                        }
                    }"""
                }
            }
        }
        stage('Build, Extract, and Push Archive') {
            agent { label 'docker' }
            steps {
                script {
                    withCredentials([string(credentialsId: GHCR_CREDENTIALS_ID, variable: 'GHCR_PAT')]) {
                        sh '''
                        echo "${GHCR_PAT}" | docker login ${GHCR_REGISTRY} -u "${GHCR_USER}" --password-stdin
                        docker build --target archive --build-arg PACKAGE_SLUG=${PACKAGE_SLUG} -t ${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${DYNAMIC_TAG_NAME}-archive .
                        docker image inspect ${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${DYNAMIC_TAG_NAME}-archive
                        container_id=$(docker create ${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${DYNAMIC_TAG_NAME}-archive)
                        docker cp ${container_id}:/${PACKAGE_SLUG}.zip .
                        docker rm -v ${container_id} || true
                        docker run --rm \
                            --pull always \
                            -v "$(pwd)/${PACKAGE_SLUG}.zip":/${PACKAGE_SLUG}.zip \
                            -e PACKAGE_ZIP_PATH="/${PACKAGE_SLUG}.zip" \
                            -e REGISTRY_USERNAME="${GHCR_USER}" \
                            -e REGISTRY_PASSWORD="${GHCR_PAT}" \
                            -e IMAGE_NAME="${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${DYNAMIC_TAG_NAME}" \
                            -e WP_PACKAGE_METADATA_OVERRIDES="${WP_PACKAGE_METADATA_OVERRIDES}" \
                            ghcr.io/codekaizen-github/wp-package-deploy-oras:v5
                        rm -f ${PACKAGE_SLUG}.zip
                        '''
                    }
                }
            }
        }
    }
}
